==Iespējas==
esošai daudzus engines aptverošai sistēmai pieplagot ClusterPoint
    https://github.com/brianfrankcooper/YCSB
    https://github.com/toflames/Wikipedia-noSQL-Benchmark
        http://www.nosqlbenchmarking.com/2011/03/updated-benchmark-methodology/

Pēc piemēra uztaisīt pamatā Clusterpoint testēšanai savu, kuru vēlāk papildindāt ar interesējošām,
    tātad modulāru,lai var viegli ieplagot citu engine. Piemēri:
        https://github.com/mongodb/mongo-perf
        http://people.apache.org/~mikemccand/lucenebench/
        https://github.com/felixge/couchdb-benchmarks

==Idializēts plāns==
uztaisīt javas moduli priekš CP ko iejūt vienā no esošajiem enginiem
uztaisīt custum python sistēmu, kas tieši CP testē uz mums vajadzīgo visu


==testi==

owerhead tester
    palaiž test run ar visu maksimāli tālu, bet neko nesūta serverim, lai testētu ši gala aizturi

insert
    empty docs
    batches of empty doccs
    inserts docs with fixed field with incermenting integer as value
    insert ~1k prepared docs

update

query

==TODO==

-pamata rāmis
    -pamata arhitektūra
    X -komandrindas parametru/karogu handlings
    -tredu spawnošana,programmēšana,kontrolēšana,beigšana un datu savākšana no tiem
    X -loggers
-tā javas tūļa veidīgi pamata workloads
-datu apkopošana/glabāšana
-datu vizuāla reprezentācija

-nepabeigtie ods and ends/todo punkti
-kārtīga funkcionāla testēšana
-performances testēšana, profilēšana, optimizācija
-vēl testa workloads



javas testera stila prastie testi
    insert in MB/s or ops/s
    R/W load (balanced, R heavy), throuhput in ops/s, latency in s
specifiskki performances test
    dazadi search varianti (laikam ops/s ..  bet noteiktam query setam)


==profiling==
python2 -m cProfile -o remote.prof taskmaster.py -u tcp://192.168.0.185 -n test_storage --debug
runsnake remote.prof


==remote server==
root
password
ip: ... 81




TODU
smukāku standartizētu argumentu padošanu taska init
rezultātu atgriešana
run load sinhrinizēšana
padod vēl papildus parametrus, piemēŗam load pickle argumentam faila vārdu
iespējams parametrus bez connection aprakstošajiem kā konfigurāciju pašā taska?
varbūt taskmaster arī jābūt neatkarīgam procesam?
opts/s ieroebežojums
vai ir vēl parametri,ko vajdzētu dot bench,kas visiem taksiem vajdzīgi?
    kā padod tāska specifiskos?
task un TaskMaster klasēm taisīt base variantus bench.py
    tos tad importēs un inheritos task'u faili, papildinot,owerridojot
        tikai to koa vajaga.
    base task/taskMaster varētu darboties standalone kā vnk tessts,kas 
        sūta status tikai vai tml, un ar -t or smlt slēdzi palaižams.
condition vairāki var izmanto to pašu lock (vs event)
divus alternatīvus piegājiesnus:
    taskmaster liek taskus queue 
    katrs workers neatkarīgi sev ģenerē taskus
partiasit to modulī,ko ar pip importēt (tad python -m bench ...)
vizualizācijai vnk http serveris,kas dod ģenerētus grafikus uz browzeriem?
Eventu vietā kkādu vien shared lauku,kas satur komandu?

jādd kontrole:
    beigt beigt workload
    sākt workload
jādabū stāvoklis
    prep pabeigts


vēl parametri vajadzīgie:
    connection aprakstšie (url lists)
    task name
    paralēlu tasku skaits
    ops/s ierobežojums (task specific?)
    taska specifiska datu faila vārds?

NORMAL:

-20-
TIME:    117.449819088
OPS:     23600
AVG LAT: 0.0986285794994
MAX LAT: 5.50594615936
MIN LAT: 0.00107789039612

-20-
TIME:    113.638156891
OPS:     23600
AVG LAT: 0.0954232263666
MAX LAT: 3.82686686516
MIN LAT: 0.00111484527588

-2-
TIME:    122.725625992
OPS:     23600
AVG LAT: 0.00973627127833
MAX LAT: 4.65464496613
MIN LAT: 0.000939130783081

-2-
TIME:    118.904098034
OPS:     23600
AVG LAT: 0.00941407164275
MAX LAT: 1.90130496025
MIN LAT: 0.000945091247559

-200-
TIME:    112.658304214
OPS:     23600
AVG LAT: 0.947390773923
MAX LAT: 112.044099808
MIN LAT: 0.00107288360596

-200-
TIME:    117.163814068
OPS:     23600
AVG LAT: 0.985743670181
MAX LAT: 117.096217871
MIN LAT: 0.00127482414246
